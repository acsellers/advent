package main

import (
	"fmt"
	"log"
)

func main() {
	fmt.Print("1: ")
	Execute([]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8}, []int{8})
	fmt.Print("0: ")
	Execute([]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8}, []int{7})

	fmt.Print("1: ")
	Execute([]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8}, []int{5})
	fmt.Print("0: ")
	Execute([]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8}, []int{8})

	fmt.Print("1: ")
	Execute([]int{3, 3, 1108, -1, 8, 3, 4, 3, 99}, []int{8})
	fmt.Print("0: ")
	Execute([]int{3, 3, 1108, -1, 8, 3, 4, 3, 99}, []int{9})

	fmt.Print("1: ")
	Execute([]int{3, 3, 1107, -1, 8, 3, 4, 3, 99}, []int{1})
	fmt.Print("0: ")
	Execute([]int{3, 3, 1107, -1, 8, 3, 4, 3, 99}, []int{10})

	fmt.Print("999: ")
	Execute([]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{7})
	fmt.Print("1000: ")
	Execute([]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{8})
	fmt.Print("1001: ")
	Execute([]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{9})
	debug = true
	Execute(input, []int{5})
}

var debug = false

type command struct {
	Code  int
	Modes []int
}

func decode(op int) command {
	c := command{
		Code:  op % 100,
		Modes: make([]int, 4),
	}
	op = op / 100
	i := 0
	for op > 0 {
		if op%10 != 0 {
			c.Modes[i] = op % 10
		}
		op = op / 10
		i++
	}
	return c
}
func Execute(ops []int, input []int) {
	ip := 0
	for ops[ip] != 99 {

		var a, b, register int
		cmd := decode(ops[ip])

		// load data
		switch cmd.Code {
		case 1, 2, 5, 6, 7, 8:
			if cmd.Modes[0] == 0 {
				ap := ops[ip+1]
				a = ops[ap]
				if debug {
					fmt.Println("Loaded A with", a, "from", ap)
				}
			} else {
				a = ops[ip+1]
				if debug {
					fmt.Println("Loaded A with", a, "from param")
				}
			}

			if cmd.Modes[1] == 0 {
				bp := ops[ip+2]
				b = ops[bp]
				if debug {
					fmt.Println("Loaded B with", b, "from", bp)
				}
			} else {
				b = ops[ip+2]
				if debug {
					fmt.Println("Loaded B with", b, "from param")
				}

			}
		case 4:
			if cmd.Modes[0] == 0 {
				ap := ops[ip+1]
				a = ops[ap]
				if debug {
					fmt.Println("Loaded A with", a, "from", ap)
				}
			} else {
				a = ops[ip+1]
				if debug {
					fmt.Println("Loaded A with", a, "from param")
				}
			}
		}

		// do actions
		switch cmd.Code {
		case 1:
			if debug {
				fmt.Println("Adding", a, "and", b)
			}
			register = a + b
		case 2:
			if debug {
				fmt.Println("Multiplying", a, "and", b)
			}
			register = a * b
		case 3:
			register = input[0]
			if debug {
				fmt.Println("Loaded", register, "from input")
			}
			input = input[1:]
		case 4:
			// do nothing
		case 5:
			if a != 0 {
				if debug {
					fmt.Println("Is true, moving to", b)
				}
				register = b
			} else {
				if debug {
					fmt.Println("Isn't true, moving to", ip+3)
				}
				register = ip + 3
			}
		case 6:
			if a == 0 {
				if debug {
					fmt.Println("Is false, moving to", b)
				}
				register = b
			} else {
				if debug {
					fmt.Println("Isn't false, moving to", ip+3)
				}
				register = ip + 3
			}
		case 7:
			if a < b {
				register = 1
			} else {
				register = 0
			}
		case 8:
			if a == b {
				register = 1
			} else {
				register = 0
			}
		default:
			fmt.Println("Instruction Pointer: ", ip)
			fmt.Println("Instruction: ", cmd.Code)
			fmt.Println("Full Instruction: ", ops[ip])
			fmt.Println("Core: ", ops)
			log.Fatal("Illegal Instruction")
		}

		// store
		switch cmd.Code {
		case 1, 2, 7, 8:

			dp := ops[ip+3]
			if debug {
				fmt.Println("Storing", register, "to", dp)
			}
			ops[dp] = register
		case 3:
			dp := ops[ip+1]
			if debug {
				fmt.Println("Storing", register, "to", dp)
			}
			ops[dp] = register
		case 4:
			fmt.Println(a)
		}

		// increment instruction pointer
		switch cmd.Code {
		case 1, 2, 7, 8:
			ip += 4
		case 3, 4:
			ip += 2
		case 5, 6:
			ip = register
		}
	}
}

var input = []int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 78, 5, 225, 1, 166, 139, 224, 101, -74, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1002, 136, 18, 224, 101, -918, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 2, 224, 224, 1, 224, 223, 223, 1001, 83, 84, 224, 1001, 224, -139, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1102, 55, 20, 225, 1101, 53, 94, 225, 2, 217, 87, 224, 1001, 224, -2120, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 102, 37, 14, 224, 101, -185, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1101, 8, 51, 225, 1102, 46, 15, 225, 1102, 88, 87, 224, 1001, 224, -7656, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1101, 29, 28, 225, 1101, 58, 43, 224, 1001, 224, -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1101, 93, 54, 225, 101, 40, 191, 224, 1001, 224, -133, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1101, 40, 79, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 1001, 223, 1, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 419, 101, 1, 223, 223, 107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 434, 1001, 223, 1, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 449, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 464, 1001, 223, 1, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 509, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 1001, 223, 1, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 569, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 7, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 1108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 629, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 644, 1001, 223, 1, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226}
